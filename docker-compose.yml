version: '3.8'

services:
  ai-chat-platform:
    build: 
      context: .
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-production}
    ports:
      - "${PORT:-3000}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - AI_BASE_URL=${AI_BASE_URL}
      - TENANT_UUID=${TENANT_UUID}
      - LOGIN_PATH=${LOGIN_PATH}
      - MAX_MESSAGE_LENGTH=${MAX_MESSAGE_LENGTH:-10000}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-5242880}
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW:-60000}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS:-10}
      - SESSION_TIMEOUT=${SESSION_TIMEOUT:-1800000}
      - NEXT_PUBLIC_APP_NAME=${NEXT_PUBLIC_APP_NAME:-AI Chat Platform}
      - NEXT_PUBLIC_APP_VERSION=${NEXT_PUBLIC_APP_VERSION:-1.0.0}
    volumes:
      # 開發模式掛載源碼
      - ${PWD}:/app${DEV_VOLUME_SUFFIX:-}
      - /app/node_modules
      - /app/.next
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ai-chat-network

  # 可選：Nginx 反向代理
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      ai-chat-platform:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - ai-chat-network
    profiles:
      - nginx

  # 可選：Redis 快取（如果需要）
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - ai-chat-network
    profiles:
      - cache

networks:
  ai-chat-network:
    driver: bridge

volumes:
  redis_data:
